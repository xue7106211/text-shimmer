{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/xueyifei01/Documents/text-shimmer/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/xueyifei01/Documents/text-shimmer/components/ui/text-shimmer.tsx"],"sourcesContent":["'use client';\nimport React, { useMemo, type JSX } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\ninterface TextShimmerProps {\n  children: string;\n  as?: React.ElementType;\n  className?: string;\n  duration?: number;\n  spread?: number;\n}\n\nexport function TextShimmer({\n  children,\n  as: Component = 'p',\n  className,\n  duration = 2,\n  spread = 2,\n}: TextShimmerProps) {\n  const MotionComponent = motion(Component as keyof JSX.IntrinsicElements);\n\n  const dynamicSpread = useMemo(() => {\n    return children.length * spread;\n  }, [children, spread]);\n\n  return (\n    <MotionComponent\n      className={cn(\n        'relative inline-block bg-[length:250%_100%,auto] bg-clip-text',\n        'text-transparent [--base-color:#a1a1aa] [--base-gradient-color:#000]',\n        '[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))] [background-repeat:no-repeat,padding-box]',\n        'dark:[--base-color:#71717a] dark:[--base-gradient-color:#ffffff] dark:[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))]',\n        className\n      )}\n      initial={{ backgroundPosition: '100% center' }}\n      animate={{ backgroundPosition: '0% center' }}\n      transition={{\n        repeat: Infinity,\n        duration,\n        ease: 'linear',\n      }}\n      style={\n        {\n          '--spread': `${dynamicSpread}px`,\n          backgroundImage: `var(--bg), linear-gradient(var(--base-color), var(--base-color))`,\n        } as React.CSSProperties\n      }\n    >\n      {children}\n    </MotionComponent>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;;;;;AAaO,SAAS,YAAY,EAC1B,QAAQ,EACR,IAAI,YAAY,GAAG,EACnB,SAAS,EACT,WAAW,CAAC,EACZ,SAAS,CAAC,EACO;IACjB,MAAM,kBAAkB,CAAA,GAAA,0LAAA,CAAA,SAAM,AAAD,EAAE;IAE/B,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC5B,OAAO,SAAS,MAAM,GAAG;IAC3B,GAAG;QAAC;QAAU;KAAO;IAErB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,iEACA,wEACA,kKACA,8LACA;QAEF,SAAS;YAAE,oBAAoB;QAAc;QAC7C,SAAS;YAAE,oBAAoB;QAAY;QAC3C,YAAY;YACV,QAAQ;YACR;YACA,MAAM;QACR;QACA,OACE;YACE,YAAY,GAAG,cAAc,EAAE,CAAC;YAChC,iBAAiB,CAAC,gEAAgE,CAAC;QACrF;kBAGD;;;;;;AAGP","debugId":null}}]
}